include "include/table.bzz"

########################################
#
# Print status
function print_status() {
  # Print debugging information
  if(pattern == picked_pattern) {
    if(picked_pattern_num == 1) {
      # Print in green if the robot converged to the correct pattern and nothing else
      debug.set_color(0,255,0)
    }
    else {
      # Print in blue if the pattern is correct, but other patterns have the same color
      debug.set_color(0,0,255)
    }
  }
  else {
    # Print in red if the robot converged to the wrong pattern
    debug.set_color(255,0,0)
  }
  # Print status
  debug.print(pattern, ":", correct_pattern_prob, " / ", picked_pattern, ":", picked_pattern_prob, ":", picked_pattern_num)
}

########################################
#
# No-communication method
#
# Init function
function good_fun_nocomm_init() {
}
#
# Step function
function good_fun_nocomm_step() {
  # Update belief from ground sensors
  belief = belief_update_sensing(belief)
  # Normalize values
  belief = belief_normalize(belief)
  # Update variables read by loop functions
  belief_update_lf(belief)
  # Status
  print_status()
}

########################################
#
# Basic method
#
# Init function
function good_fun_basic_init() {
  # Initialize list of received messages
  recv = {}
  # Listen to neighbors
  neighbors.listen("bb", function(key, belf, robot) {
      # Save received belief, making sure no value is zero
      recv[size(recv)] = belief_normalize(
        map(belf, function(k,v) { return v + EPSILON }))
    })
}
#
# Step function
function good_fun_basic_step() {
  # Initialize new belief
  var newb = belief_new(0.0)
  # Go through all the patterns
  var p = 0
  while(p < num_patterns) {
    # Communication update
    newb[p] = belief[p]
    var i = 0
    while(i < size(recv)) {
      newb[p] = newb[p] * recv[i][p]
      i = i + 1
    }
    p = p + 1
  }
  # Update belief from ground sensors
  newb = belief_update_sensing(newb)
  # Normalize values
  belief = belief_normalize(newb)
  # Update variables read by loop functions
  belief_update_lf(belief)
  # Broadcast belief
  neighbors.broadcast("bb", belief)
  # Clear received messages
  recv = {}
  # Status
  print_status()
}

########################################
#
# Take the average
#
# Init function
function good_fun_average_init() {
  log("good_fun_average_init")
  debug.set_color(0,255,0)
}
#
# Step function
function good_fun_average_step() {
  log("good_fun_average_step")
}

########################################
#
# Filter extreme beliefs using cosine
#
# Init function
function good_fun_filter_init() {
  # Initialize list of received messages
  recv = {}
  # Listen to neighbors
  neighbors.listen("bb", function(key, belf, robot) {
      # Save received belief, making sure no value is zero
      recv[size(recv)] = belief_normalize(
        map(belf, function(k,v) { return v + EPSILON }))
    })
}
#
# Step function
function good_fun_filter_step() {
  # New belief
  var newb
  # Make sure there are messages to listen to
  if(size(recv) > num_liars) {
    # Initialize new belief
    newb = belief_new(0.0)
    # Go through all the messages and compute their similarity to the current
    # belief
    recv = map(recv, function(k, v) {
        var dff = belief_compare(belief, v)
        return { .bel = v, .diff = dff }
      })
    # Sort the messages by similarity
    table.sort(recv, function(b1, b2) {
        if(b1.diff <= b2.diff) return 1
        else return 0
      })
    # Eliminate messages with high similarity
    # recv = map(recv, function(k,v) {
    #     # if (id == 1) log(k)
    #     # if (id == 1) log(v)
    #     if(k > num_liars) return nil
    #     else return v
    #   })
    # Go through all the remaining patterns and update the belief
    var p = 0
    while(p < num_patterns) {
      # Communication update
      newb[p] = belief[p]
      var i = num_liars
      while(i < size(recv)) {
        newb[p] = newb[p] * recv[i].bel[p]
        i = i + 1
      }
      p = p + 1
    }
  }
  else {
    # Not enough messages
    newb = belief
  }
  # Update belief from ground sensors
  newb = belief_update_sensing(newb)
  # Normalize values
  belief = belief_normalize(newb)
  # Update variables read by loop functions
  belief_update_lf(belief)
  # Broadcast belief
  neighbors.broadcast("bb", belief)
  # Clear received messages
  recv = {}
  # Status
  print_status()
}


########################################
#
# Filter extreme beliefs using threshold over Intersection over Union 
#
# Init function
function good_fun_iou_init() {
  # Initialize list of received messages
  recv = {}
  # Listen to neighbors
  neighbors.listen("bb", function(key, belf, robot) {
      # Save received belief, making sure no value is zero
      recv[size(recv)] = belief_normalize(
        map(belf, function(k,v) { return v + EPSILON }))
    })
}

#
# Step function
function good_fun_iou_step() {
  # New belief
  var newb
  bin_thresh = 1.0/num_patterns
  thresh = 1.0/(0.9*num_patterns/2)
  if (size(recv) > 0)
  {

    # Initialize new belief
    newb = belief_new(0.0)
    iou = {}
    bin_recv = map(recv, function(k, v) {
      bin_bel = binarise_belief(v, bin_thresh)
      return bin_bel
    })
    bin_self = binarise_belief(belief, bin_thresh)
    scores = map(bin_recv, function(k, v) {
      var i = 0
      intersection = 0
      union = 0
      while (i < num_patterns) {
        if (v[i] == 1 and bin_self[i] == 1){
          intersection = intersection + 1
        }
        if (v[i] == 1 or bin_self[i] == 1) {
          union = union + 1
        }
        i = i + 1
      }
      if (union == 0) union = 1
      return intersection*1.0/union 
    })
    # Go through all the patterns and update the belief
    var p = 0
    while(p < num_patterns) {
      # Communication update
      newb[p] = belief[p]
      var i = 0
      while(i < size(recv)) {
        if (scores[i] > thresh)
          newb[p] = newb[p] * recv[i][p]
        i = i + 1
      }
      p = p + 1
    }
  }
  else {
    # Not enough messages
    newb = belief
  }
  # Update belief from ground sensors
  newb = belief_update_sensing(newb)
  # Normalize values
  belief = belief_normalize(newb)
  # Update variables read by loop functions
  belief_update_lf(belief)
  # Broadcast belief
  neighbors.broadcast("bb", belief)
  # Clear received messages
  recv = {}
  # Status
  print_status()
}

