include "include/vec2.bzz"

########################################
#
# Global variables set in the loop functions
#
# comm_period  = the time between two message updates
# num_liars    = the number of liars
# good_fun     = the function that a non-lying robot must execute
# bad_fun      = the function that a lying robot must execute
# num_patterns = the total number of patterns
# pattern      = the correct pattern (an integer)

########################################
#
# Overall logic
#
# 1. The robots execute obstacle avoidance
# 2. The robots are divided in two swarms: good and bad
#    a. The non-lying robots exchange information according to good_fun
#    b. The lying robots exchange information according to bad_fun

########################################
#
# Swarm ids
SWARM_BAD  = 1
SWARM_GOOD = 2

########################################
#
# Executed at init time
function init() {
  # Create the swarms of good and bad robots
  bad = swarm.create(SWARM_BAD)
  bad.select(id < num_liars)
  good = bad.others(SWARM_GOOD)
}

########################################
#
# Executed at every step
function step() {
  obstacle_avoidance()
  bad.exec(bad_fun)
  good.exec(good_fun)
}

########################################
#
# Executed at the end of the experiment
function destroy() {
}

########################################
#
# Obstacle avoidance logic
function obstacle_avoidance() {
  # Consider only frontal proximity sensors
  var frontsensors = filter(proximity, function(k,v) {
      return v.angle < math.pi / 2.0 or v.angle > 3.0 * math.pi / 2.0
    })
  # Transform table elements in cartesian coordinates
  var cartesian = map(frontsensors, function(k,v) {
      return math.vec2.newp(v.value, v.angle)
    })
  # Sum vectors together
  var accum = reduce(cartesian, function(k,v,a) {
      return math.vec2.add(a,v)
    }, math.vec2.new(0,0))
  # Rescale accumulator
  math.vec2.scale(accum, 1.0 / size(cartesian))
  # Get angle and length of accumulator
  var angle = math.vec2.angle(accum)
  var length = math.vec2.length(accum)
  # If the angle of the vector is small enough and the closest obstacle
  # is far enough, continue going straight, otherwise curve a little
  # When the proximity sensors see nothing, accum is zero, so the robot
  # just goes straight
  if(math.abs(angle) < math.pi/10.0 and length < 0.1) {
    set_wheels(10.0, 10.0)
  }
  else {
    if(angle > 0.0) {
      set_wheels(10.0, 0.0)
    }
    else {
      set_wheels(0.0, 10.0)
    }
  }
}

########################################
#
# Bad functions
#
# Constant belief
function bad_fun_constant() {
  
}
# Uniformly random belief
function bad_fun_uniform() {
  
}
# Periodic belief
function bad_fun_periodic() {
  
}

########################################
#
# Good functions
#
# Basic method
function good_fun_basic() {
  
}
# Take the average
function good_fun_average() {
  
}
# Filter extreme beliefs
function good_fun_filter() {
  
}
