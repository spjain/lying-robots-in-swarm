########################################
#
# Creates a new belief vector with the given value
function belief_new(v) {
  var b = {}
  var i = 0
  while(i < num_patterns) {
    b[i] = v
    i = i + 1
  }
  return b
}

########################################
#
# Normalize belief
function belief_normalize(bel) {
  var sum = reduce(bel, function(k,v,s) { return s + v}, 0.0 )
  return map(bel, function(k,v) { return v / sum })
}

########################################
#
# Performs the sensing-based part of the belief update
function belief_update_sensing(bel) {
  # Get actual ground readings and make sure they're the same for all sensors
  if((ground[0].value != ground[1].value) or (ground[0].value != ground[2].value) or (ground[0].value != ground[3].value)) {
    # Readings are not the same, skip calculations
    return bel
  }
  # Calculate actual reading
  var act_read = (ground[0].value > 0.0)
  # Apply noise
  if(math.rng.uniform(1.0) < noise_prob) act_read = !act_read
  # Calculate the arena position of the center of mass of the ground sensors
  var gndpos = reduce(ground, function(k,v,sum) { return math.vec2.add(sum, v.offset) }, math.vec2.new(0.0, 0.0))
  gndpos = math.vec2.scale(gndpos, 0.25)
  gndpos = math.vec2.rotate(gndpos, pose.orientation.yaw)
  gndpos = math.vec2.add(gndpos, pose.position)
  # Get current cell index
  var idx = pos_to_cell(gndpos.x, gndpos.y)
  # Calculate new belief
  return map(bel, function(k, v) {
      # Get expected reading
      var exp_read = ((k & (1 << idx)) > 0)
      # Calculate new prob
      if(exp_read == act_read) {
        v = v * (1-noise_prob)
      }
      else {
        v = v * noise_prob
      }
      if (v < 2*EPSILON) v = v + EPSILON
      return v
    })
}

########################################
#
# Loop function variables
function belief_update_lf(bel) {
  # Set probability of correct pattern
  correct_pattern_prob = bel[pattern]
  # Set index of picked pattern
  picked_pattern_num = 0
  picked_pattern = reduce(bel,
    function(k,v,idx) {
      if(bel[k] >= bel[idx]) {
        if(bel[k] == bel[idx]) {
          picked_pattern_num = picked_pattern_num + 1
          return idx
        }
        else {
          return k
        }
      }
      else {
        return idx
      }
    },
    pattern)
  # Set probability of picked pattern
  picked_pattern_prob = bel[picked_pattern]
}

########################################
#
# Compare beliefs
#
# Calculates absolute value of the cosine similarity of beliefs.
#
# Two beliefs are 0 when they are identical, and increasingly closer to
# 1 when they differ.
function belief_compare(b1, b2) {
  return math.abs(reduce(b1, function(k,v,acc) {
        return acc + v * b2[k]
      }, 0.0))
}


function binarise_belief(belief, bin_thresh){
  out = map(belief, function(k, v) { 
    if (v > bin_thresh) return 1
    else return 0
  })
  return out
}


########################################
#
# Print belief
function belief_print(bel) {
  log(id, " BELIEF")
  foreach(bel, function(k,v) {
      log("    ", k, " -> ", v)
    })
}
